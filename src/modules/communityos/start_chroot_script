#!/usr/bin/env bash
# CommunityOS
# Sets up base installation of CommunityOS
# Written by Bud Hammerton
# GPL V3
########


# Source error handling, leave this in place
set +x
set -e

export LC_ALL=C

source /common.sh
install_cleanup_trap

unpack /filesystem/home/pi /home/pi pi
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot

##############################
### Base file system

apt-get update
# remove packages in case we are building from a regular raspbian image instead of the lite one...
remove_extra=$(remove_if_installed scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk bluej libreoffice-common libreoffice-core freepats greenfoot nodered)
echo "--- Removing:" $remove_extra
apt-get remove -y --purge  $remove_extra
apt-get autoremove -y
# add packages we need
echo "--- Installing required packages"
apt-get -y --allow-change-held-packages install python2.7 python-virtualenv python-dev git screen subversion cmake checkinstall avahi-daemon libavahi-compat-libdnssd1 libffi-dev libssl-dev
echo "--- Reinstall iputils-ping"
apt-get install --reinstall iputils-ping

### OctoPrint environment
# start building  pi user environmenmt
pushd /home/pi
  # building virtualenv
  sudo -u pi virtualenv OctoPrint
  sudo -u pi /home/pi/OctoPrint/bin/pip install --upgrade pip
  
  # OctoPrint & pyserial
  if [ "$COMMUNITYOS_INCLUDE_OCTOPRINT" == "yes" ]
  then
    echo "--- Installing pyBonjour"
    # pybonjour (for mdns discovery)
    sudo -u pi /home/pi/OctoPrint/bin/pip install $COMMUNITYOS_PYBONJOUR_ARCHIVE
    echo "--- Installing OctoPrint"
    # OctoPrint
    PIP_DEFAULT_TIMEOUT=60 sudo -u pi /home/pi/OctoPrint/bin/pip install $COMMUNITYOS_OCTOPRINT_ARCHIVE
    echo "--- pyBonjour & OctoPrint installation complete"
  fi
  
  # mjpg-streamer
  if [ "$COMMUNITYOS_INCLUDE_MJPGSTREAMER" == "yes" ]
  then
    echo "--- Installing mjpg-streamer"
    if [ $( is_in_apt libjpeg62-turbo-dev ) -eq 1 ]; then
      echo "--- Installing libjpeg6"
      sudo apt-get -y --allow-change-held-packages install libjpeg62-turbo-dev
    elif [ $( is_in_apt libjpeg8-dev ) -eq 1 ]; then 
      echo "--- Installing libjpeg8"
      sudo apt-get -y --allow-change-held-packages install libjpeg8-dev
    fi
    echo "--- Installing imagemagick"
    sudo apt-get -y --allow-change-held-packages --no-install-recommends install imagemagick libav-tools libv4l-dev
    gitclone COMMUNITYOS_MJPGSTREAMER_REPO mjpg-streamer
    pushd mjpg-streamer
      mv mjpg-streamer-experimental/* .
      echo "--- Compiling mjpg-streamer"
      sudo -u pi make
      # create our custom web folder and add a minimal index.html to it
      sudo -u pi mkdir www-octoprint
      pushd www-octoprint
        cat <<EOT >> index.html
<html>
<head><title>mjpg_streamer test page</title></head>
<body>
<h1>Snapshot</h1>
<p>Refresh the page to refresh the snapshot</p>
<img src="./?action=snapshot" alt="Snapshot">
<h1>Stream</h1>
<img src="./?action=stream" alt="Stream">
</body>
</html>
EOT
      popd
    popd
  echo "--- mjpg-streamer and dependency installation complete"  
  fi
  
  
  # CuraEngine
  if [ "$COMMUNITYOS_INCLUDE_CURAENGINE" == "yes" ]
  then
    echo "--- Installing CuraEngine"
    folder=CuraEngine-$COMMUNITYOS_CURAENGINE_VERSION
    zipfile=$folder.zip
    echo "--- Installing gcc"
    apt-get -y install gcc-4.9 g++-4.9
    sudo -u pi wget -O$zipfile $COMMUNITYOS_CURAENGINE_ARCHIVE
    sudo -u pi unzip $zipfile
    pushd $folder
      sudo -u pi make CXX=g++-4.9 VERSION=$COMMUNITYOS_CURAENGINE_VERSION
      echo "--- Compiling Cura Engine"
      cp build/CuraEngine /usr/local/bin/cura_engine
    popd
    sudo -u pi rm -r $folder $zipfile
    echo "--- CuraEngine compilation complete"
  fi
  
  
  # HAProxy for http and https, and webcam
  if [ "$COMMUNITYOS_INCLUDE_HAPROXY" == "yes" ]
  then
    echo "--- Installing HAProxy"
    apt-get -y --allow-change-held-packages install ssl-cert haproxy
    rm /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem
    echo "--- HAProxy installation complete"
  fi

  # WiringPi
  if [ "$COMMUNITYOS_INCLUDE_WIRINGPI" == "yes" ]
  then
    echo "--- Installing WiringPi"
    apt-get install wiringpi
    echo "--- WiringPi installation complete"
  fi
    
  # fetch current yq build and install to /usr/local/bin
  echo "--- Downloading Yq YAML processor"
  wget -O yq $COMMUNITYOS_YQ_DOWNLOAD && chmod +x yq && mv yq /usr/local/bin
  echo "--- Yq installation complete"
popd

# Make sure user pi has access to serial ports
usermod -a -G tty pi
usermod -a -G dialout pi

# Store CommunityOS commit used to build this image
echo "$COMMUNITYOS_COMMIT" > /etc/communityos_commit

# Keep legacy compatibility
ln -s /etc/custompios_buildbase /etc/communityos_buildbase

# Allow pi user to run shutdown and service commands
echo "pi ALL=NOPASSWD: /sbin/shutdown" > /etc/sudoers.d/octoprint-shutdown
echo "pi ALL=NOPASSWD: /usr/sbin/service" > /etc/sudoers.d/octoprint-service

# Make sure users don't run git with sudo, thus breaking permissions, by adding /root/bin to the
# default sudo path and placing a git wrapper script there that checks if it's run as root
sed -i "s@secure_path=\"@secure_path=\"/root/bin:@g" /etc/sudoers
chmod +x /root/bin/git

# Unpack root at the end, so files are modified before
unpack /filesystem/root /

##############################
### Set up system services

### Disable GUI at start
systemctl_if_exists disable lightdm.service || true

### Change default password and hostname (if available)
chmod +x /etc/init.d/change_password
chmod +x /etc/init.d/change_hostname
update-rc.d change_password defaults
update-rc.d change_hostname defaults

### OctoPrint
if [ "$COMMUNITYOS_INCLUDE_OCTOPRINT" == "yes" ]
then
  echo "--- Enabling OctoPrint service"
  chmod +x /etc/init.d/octoprint
  update-rc.d octoprint defaults 95
else
  # let's remove the configs for system services we don't need
  echo "--- Removing OctoPrint service"
  rm /etc/init.d/octoprint
  rm /etc/default/octoprint
fi

### haproxy
if [ "$COMMUNITYOS_INCLUDE_HAPROXY" == "yes" ]
then
  echo "--- Enabling haproxy"
  systemctl_if_exists enable gencert.service
else
  # let's remove the configs for system services we don't need
  echo "--- Removing haproxy service"
  rm /etc/systemd/system/gencert.service
  # also we need to make OctoPrint bind to all interfaces because otherwise
  # it will be unaccessible...
  [ -f /etc/default/octoprint ] && sed -i "s@HOST=127.0.0.1@HOST=0.0.0.0@" /etc/default/octoprint 
fi

### CuraEngine
if [ ! "$COMMUNITYOS_INCLUDE_CURAENGINE" == "yes" ]
then
  # unconfigure the cura engine path in OctoPrint's config.yaml
  echo "--- Removing CuraEngine"
  sudo -u pi sed -i -e "s@cura_engine: /usr/local/bin/cura_engine@cura_engine:@g" /home/pi/.octoprint/config.yaml
fi

### mjpg_streamer
if [ "$COMMUNITYOS_INCLUDE_MJPGSTREAMER" == "yes" ]
then
  # make webcamd autostart
  echo "--- Enabling webcam service"
  chmod +x /etc/init.d/webcamd
  update-rc.d webcamd defaults
else
  echo "--- Removing webcam service"
  rm /etc/logrotate.d/webcamd
  rm /etc/init.d/webcamd
  rm /etc/default/webcamd
  rm /root/bin/webcamd
fi

# Make sure plymouth is set to the correct theme
if [ "$COMMUNITYOS_INCLUDE_THEME" == "yes" ]
then
  echo "--- Setting default theme"
  pushd /usr/share/plymouth/themes
  plymouth-set-default-theme communityos -R
  sed -i 's/$/ quiet splash logo.nologo plymouth.ignore-serial-consoles/' /boot/cmdline.txt
  echo "--- Theme installation complete"
fi

##############################
### Clean up before exiting

apt-get clean
apt-get autoremove -y
set -x